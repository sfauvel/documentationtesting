name: Publish and Release
# V1.0
on:
  push:
    branches: [ ci_workflow ]
#  pull_request:
#    branches: [ develop ]
#    branches: [ master ]

  workflow_dispatch:

env:
  root_branch: 'ci_workflow'
  doc_branch: 'pages'
  docs_generated: 'docs'
  docs_published: 'published_docs'

jobs:
  get_last_release_tag:
    runs-on: ubuntu-latest
    env:
      #      release_pattern: 'release-*'
      release_pattern: 'documentationtesting-*'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: find last release tag
        id: last_release
        run: |
          my_local_var=`git describe --abbrev=0 --tags --match "${{env.release_pattern}}"`
          echo "::set-output name=LAST_RELEASE::$(git describe --abbrev=0 --tags --match "${{env.release_pattern}}")"

#      - name: log from last release
#        run: |
#          echo "Last release: ${{ steps.last_release.outputs.LAST_RELEASE }}"
#          git log --oneline ${{ steps.last_release.outputs.LAST_RELEASE }}..HEAD

    outputs:
      LAST_RELEASE: ${{ steps.last_release.outputs.LAST_RELEASE }}

  check_if_sources_modified:
    needs: get_last_release_tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: check modified files
        id: check_files
        run: |
          echo "::set-output name=NB_SRC_MODIFIED::$(git diff --name-only ${{ needs.get_last_release_tag.outputs.LAST_RELEASE }} HEAD | grep documentationtesting/src/main | wc -l)"

      - name: display nb modified files
        run: |
          echo "Nb src files modified: ${{steps.check_files.outputs.NB_SRC_MODIFIED}}"

    outputs:
      NB_SRC_MODIFIED: ${{steps.check_files.outputs.NB_SRC_MODIFIED}}

#  display_modified_src:
#    needs: check_if_sources_modified
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: display nb modified files
#        run: |
#          echo "Nb src files modified: ${{needs.check_if_sources_modified.outputs.NB_SRC_MODIFIED}}"
#

  merge_from_root_branch:
    name: Merge from root branch
    needs: check_if_sources_modified
    if: needs.check_if_sources_modified.outputs.NB_SRC_MODIFIED == 0
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{env.doc_branch}}
      - name: display nb modified files
        run: |
          echo "Nb src files modified: ${{needs.check_if_sources_modified.outputs.NB_SRC_MODIFIED}}"

      - name: Configure Git user
        run: |
          git config user.email "actions@noreply.github.com"
          git config user.name "GitHub Actions"

      - name: Merge from root branch
        run: |
          git merge origin/${{env.root_branch}} --allow-unrelated-histories -m "Merge root branch"
          git push -f
#        run: git merge origin/develop --allow-unrelated-histories -m "Merge from develop"
#        run: git merge origin/master --allow-unrelated-histories -m "Merge from master"


  generate_doc:
    name: Generate doc
    needs: merge_from_root_branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{env.doc_branch}}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Package with Maven
#        run: mvn -B package --file documentationtesting/pom.xml
        run: |
          mkdir -p ${{env.docs_published}}
          echo "<html>My new doc</html>" > ${{env.docs_published}}/index.html

      - name: Copy docs
        run: |
          rm -Rf ${{env.docs_published}}
          cp -R ${{env.docs_generated}} ${{env.docs_published}}
#          rm -Rf docs
#          cp -R target/docs docs
#
      - name: Retrieve diff
        id: git_diff
        run: |
          git add ${{env.docs_published}}
          echo "::set-output name=DOC_DIFF::$(git diff --cached  | wc -l)"
#
      - name: Configure Git user
        if: steps.git_diff.outputs.DOC_DIFF > 0
        run: |
          git config user.email "actions@noreply.github.com"
          git config user.name "GitHub Actions"

      - name: Commit docs
        if: steps.git_diff.outputs.DOC_DIFF > 0
        run: |
          git add ${{env.docs_published}}
          git commit -m "New doc"
          git push -f
